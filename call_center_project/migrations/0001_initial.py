# Generated by Django 4.1.3 on 2022-11-20 20:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.PositiveSmallIntegerField(choices=[('Admin', 'Admin'), ('Operator', 'Operator'), ('TenantCompanyOwner', 'Tenantcompanyowner')], default='Admin')),
                ('isdisabled', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(choices=[('Unknown', 'Unknown'), ('Other', 'Other'), ('Male', 'Male'), ('Female', 'Female')], default='Unknown', max_length=100)),
                ('phone_number', models.CharField(default=None, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('street', models.CharField(blank=True, max_length=100)),
                ('building', models.CharField(blank=True, max_length=100)),
                ('additional_info', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='CallerPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('phone_number', models.CharField(max_length=100, unique=True)),
                ('gender', models.CharField(choices=[('Unknown', 'Unknown'), ('Other', 'Other'), ('Male', 'Male'), ('Female', 'Female')], default='Unknown', max_length=100)),
                ('email', models.EmailField(blank=True, default=None, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CallLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('duration', models.PositiveSmallIntegerField()),
                ('caller_person_message', models.TextField(blank=True)),
                ('operator_message', models.TextField(blank=True)),
                ('disconnect_initiator', models.CharField(choices=[('Origination', 'Origination'), ('Destination', 'Operator')], max_length=100)),
                ('response', models.CharField(choices=[('Forbidden', 'Forbidden'), ('BusyHere', 'Busyhere'), ('RequestTerminated', 'Requestterminated'), ('OK', 'Ok')], max_length=100)),
                ('paid', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='OperatorToWorkPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SoftwareVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TenantCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isdisabled', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('Unknown', 'Unknown'), ('Other', 'Other'), ('Production', 'Production'), ('Commerce', 'Commerce'), ('ServiceIndustry', 'Serviceindustry')], default='Unknown', max_length=100)),
                ('price_per_operator', models.FloatField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=100)),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_places', to='call_center_project.office')),
                ('software_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='work_places', to='call_center_project.softwareversion')),
                ('tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='work_places', to='call_center_project.tenantcompany')),
            ],
        ),
        migrations.CreateModel(
            name='TenantCompanyPhoneNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('tenant_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_company_phone_numbers', to='call_center_project.tenantcompany')),
            ],
        ),
        migrations.AddConstraint(
            model_name='tenantcompany',
            constraint=models.CheckConstraint(check=models.Q(('price_per_operator__gte', 0.0)), name='tenant_company_price_per_operator_range'),
        ),
        migrations.AddField(
            model_name='softwareversion',
            name='software',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='software_versions', to='call_center_project.software'),
        ),
        migrations.AddField(
            model_name='operatortoworkplace',
            name='operator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_places', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='operatortoworkplace',
            name='work_place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operators', to='call_center_project.workplace'),
        ),
        migrations.AddField(
            model_name='office',
            name='address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='offices', to='call_center_project.address'),
        ),
        migrations.AddField(
            model_name='calllog',
            name='address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='call_logs', to='call_center_project.address'),
        ),
        migrations.AddField(
            model_name='calllog',
            name='caller_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_logs', to='call_center_project.callerperson'),
        ),
        migrations.AddField(
            model_name='calllog',
            name='operator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='call_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='calllog',
            name='tenant_company_phone_number',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_logs', to='call_center_project.tenantcompanyphonenumber'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='tenant_company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='call_center_project.tenantcompany'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='workplace',
            constraint=models.UniqueConstraint(fields=('room_number', 'office'), name='unique_work_place'),
        ),
        migrations.AddConstraint(
            model_name='softwareversion',
            constraint=models.UniqueConstraint(fields=('version', 'software'), name='unique_software_version'),
        ),
        migrations.AddConstraint(
            model_name='office',
            constraint=models.UniqueConstraint(fields=('address', 'title'), name='unique_office'),
        ),
        migrations.AddConstraint(
            model_name='calllog',
            constraint=models.CheckConstraint(check=models.Q(('paid__gte', 0.0)), name='call_log_paid_range'),
        ),
    ]
